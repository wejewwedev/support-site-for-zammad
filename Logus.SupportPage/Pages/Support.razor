@using Logus.SupportPage.Data.Dtos
@using Logus.SupportPage.Infrastructure.Abstraction.Implementation
@using Logus.SupportPage.Infrastructure.Extensions
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Mvc
@using System.IdentityModel.Tokens.Jwt
@using System.Text
@using System.Security.Cryptography
@using Logus.SupportPage.Data.Models
@inject ZammadUserService zammadUserService
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration

@page "/support"

<div class="px-4 pt-5 my-5 text-center border-bottom">
    @if (!@IsSuccessful)
    {
        <p class="lead mb-2">Для обращения в службу поддержки вы должны быть авторизованы в приложении</p>
    }
    else
    {
        <h3 class="display-4 fw-bold">@UserInfo?.Organization</h3>
        <div class="col-lg-6 mx-auto">
            <p class="lead mb-2"><b class="font-weight-bold">@UserInfo?.FirstName @UserInfo?.MiddleName</b>, вы можете обратиться в службу поддержки используя портал <a href="@ZammadServerAddress">@ZammadServerAddress</a></p>
            <p class="lead mb-2">Для входа используйте следующие данные:</p>
            <p class="lead mb-2">Логин: @UserInfo?.Email</p>
            <p class="lead mb-2">Пароль: @UserInfo?.Password</p>
        </div> 
    }
    <p class="lead mb-4">Для решения экстренных вопросов вы можете обратиться по телефону: <a href="@PhoneNumberOfSupportService">@PhoneNumberOfSupportService</a></p>
    <div class="overflow-hidden" style="max-height: 80vh;">
        <div class="container px-5">
            <img src="images/ticket_zoom.png" class="img-fluid border rounded-3 shadow-lg mb-4" alt="Example image" width="700" height="500" loading="lazy">
        </div>
    </div>
</div>



@code {
    [Inject]
    private CustomHttpContext? CustomHttpContext { get; set; }
    [Inject]
    private SecurePasswordHasher? SecurePasswordHasher { get; set; }
    [Parameter]
    public UserCreateDto? UserInfo { get; set; }
    public string? PhoneNumberOfSupportService;
    public string? ZammadServerAddress;
    public bool IsSuccessful;

    protected override async Task OnInitializedAsync()
    {
        if (CustomHttpContext is null)
            throw new ArgumentNullException(nameof(CustomHttpContext));

        ZammadServerAddress = Configuration.GetValue<string>("ZammadServerAddress");
        PhoneNumberOfSupportService = Configuration.GetValue<string>("PhoneNumberOfSupportService");

        /// <summary> 
        /// если токен пришел, проверяем есть ли юзер с такими данными либо создаем его
        /// если токена нет, просим пользователя авторизоваться в десктопе
        /// </summary>

        if (CustomHttpContext.TokenIsReceived)
        {
            UserInfo = await CreateUserAsync(new JwtSecurityToken(CustomHttpContext.AuthorizationToken));
            IsSuccessful = true;
        }
        else
        {
            IsSuccessful = false;
        }
    }

    [NonAction]
    public async Task<UserCreateDto> CreateUserAsync(JwtSecurityToken jwtToken)
    {
        if (jwtToken is null)
            throw new ArgumentNullException(nameof(jwtToken));

        UserCreateDto userDto = new();

        userDto.PopulateObjectFromJwtToken(jwtToken);

        if (userDto.FirstName is null)
            throw new ArgumentNullException(nameof(userDto.FirstName));
        if (userDto.LastName is null)
            throw new ArgumentNullException(nameof(userDto.LastName));
        if (userDto.MiddleName is null)
            throw new ArgumentNullException(nameof(userDto.MiddleName));
        if (userDto.Organization is null)
            throw new ArgumentNullException(nameof(userDto.Organization));
        if (userDto.Email is null)
            throw new ArgumentNullException(nameof(userDto.Email));

        // checking if there is a user with this login (login = email) on the zammad 
        // if the user exists then he is redirected to the support portal
        // else a user is created with the received data

        User user = await zammadUserService.SearchByLogin(userDto.Email, Configuration.GetValue<string>("ApiKeyZammadServer"));

        if (user is not null)
            NavigationManager.NavigateTo($"{Configuration.GetValue<string>("ZammadServerAddress")}");

        if (SecurePasswordHasher is null)
            throw new ArgumentNullException(nameof(SecurePasswordHasher));
            
        userDto.Password = SecurePasswordHasher.Hash(userDto.FirstName, userDto.LastName, userDto.MiddleName, userDto.Organization, userDto.Email);

        await zammadUserService.Create(userDto, Configuration.GetValue<string>("ApiKeyZammadServer"));
        return userDto;
    }
}
